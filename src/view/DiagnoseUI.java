/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import java.io.File;

/**
 *
 * @author DADO
 */
public class DiagnoseUI extends javax.swing.JFrame {
    private static final int MegaBytes = 10241024;
    /**
     * Creates new form NewJFrame
     */
    public DiagnoseUI() {
        initComponents();
        
        printDiagnoseData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        OSNameLbl = new javax.swing.JLabel();
        OSVersionLbl = new javax.swing.JLabel();
        OSArchLbl = new javax.swing.JLabel();
        OSUserLbl = new javax.swing.JLabel();
        OSRepoLbl = new javax.swing.JLabel();
        OSRepoSizeLbl = new javax.swing.JLabel();
        JVMAllLbl = new javax.swing.JLabel();
        JVMCurrentAllLbl = new javax.swing.JLabel();
        JVMFreeLbl = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(450, 126));
        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.Y_AXIS));

        OSNameLbl.setText("jLabel1");
        getContentPane().add(OSNameLbl);

        OSVersionLbl.setText("jLabel2");
        getContentPane().add(OSVersionLbl);

        OSArchLbl.setText("jLabel1");
        getContentPane().add(OSArchLbl);

        OSUserLbl.setText("jLabel1");
        getContentPane().add(OSUserLbl);

        OSRepoLbl.setText("jLabel2");
        getContentPane().add(OSRepoLbl);

        OSRepoSizeLbl.setText("jLabel3");
        getContentPane().add(OSRepoSizeLbl);

        JVMAllLbl.setText("jLabel4");
        getContentPane().add(JVMAllLbl);

        JVMCurrentAllLbl.setText("jLabel1");
        getContentPane().add(JVMCurrentAllLbl);

        JVMFreeLbl.setText("jLabel2");
        getContentPane().add(JVMFreeLbl);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DiagnoseUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DiagnoseUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DiagnoseUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DiagnoseUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DiagnoseUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel JVMAllLbl;
    private javax.swing.JLabel JVMCurrentAllLbl;
    private javax.swing.JLabel JVMFreeLbl;
    private javax.swing.JLabel OSArchLbl;
    private javax.swing.JLabel OSNameLbl;
    private javax.swing.JLabel OSRepoLbl;
    private javax.swing.JLabel OSRepoSizeLbl;
    private javax.swing.JLabel OSUserLbl;
    private javax.swing.JLabel OSVersionLbl;
    // End of variables declaration//GEN-END:variables

    private void printDiagnoseData() {
        System.out.println("Názov : "+ System.getProperty("os.name"));
        System.out.println("OS Version: " + System.getProperty("os.version"));
        System.out.println("OS arch : "+System.getProperty("os.arch"));
        System.out.println(System.getProperty("user.name"));
        System.out.println(System.getProperty("user.home"));
        long folderSize = getFolderSize(new File(System.getProperty("user.dir")));
        long maxMemory = Runtime.getRuntime().maxMemory()/MegaBytes; //celkova
        long totalMemory = Runtime.getRuntime().totalMemory()/MegaBytes; //dostupna
        long freeMemory = Runtime.getRuntime().freeMemory()/MegaBytes;//volna
        
        OSNameLbl.setText(("Názov : "+ System.getProperty("os.name")));
        OSVersionLbl.setText("OS Version: " + System.getProperty("os.version"));
        OSArchLbl.setText("OS arch : "+System.getProperty("os.arch"));
        OSUserLbl.setText(System.getProperty("user.name"));
        OSRepoLbl.setText(System.getProperty("user.home"));
        OSRepoSizeLbl.setText("Repository size: " + (folderSize/MegaBytes) + "MB" + " (for size and permissions issues this is the size of the folder: " + System.getProperty("user.dir")+")");
        JVMAllLbl.setText("Celkova Pamat JVM " + maxMemory );
        JVMCurrentAllLbl.setText("Dostupna pamat JVM: " + totalMemory);
        JVMFreeLbl.setText("Volna pamat JVM: " + freeMemory);
                
    }
    
    // from: https://www.geeksforgeeks.org/java-program-to-get-the-size-of-a-directory/
    private long getFolderSize(File folder)
    {
        long length = 0;
       
        // listFiles() is used to list the
        // contents of the given folder
        File[] files = folder.listFiles();
 
        int count = files.length;
 
        // loop for traversing the directory
        for (int i = 0; i < count; i++) {
            if (files[i].isFile()) {
                length += files[i].length();
            }
            else {
                length += getFolderSize(files[i]);
            }
        }
        return length;
    }
}
